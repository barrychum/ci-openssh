name: workflow 007

on:
  push:
    branches:
      - main
    paths:
      - '/DockerfilePlaceholder'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ vars.IMAGE_NAME }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create and switch to badge-data branch
      run: |
        git checkout badge-data || git checkout -b badge-data
        git pull origin badge-data || true

    - name: Generate badge data
      run: |
        # Replace this with your actual logic to determine the badge value
        BADGE_VALUE="passing"
        
        # Create a JSON file with the badge data
        echo '{"schemaVersion": 1, "label": "tests", "message": "'$BADGE_VALUE'", "color": "green"}' > badge-data.json

    - name: Commit and push changes
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add badge-data.json
        git commit -m "Updated badge data" || echo "No changes to commit"
        git push origin badge-data

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.BADGE_TOKEN }}
        branch: badge-data


    - name: Set up Docker Build Tag
      run: |
        VERSION=$(grep -m 1 '^ARG VERSION=' Dockerfile | cut -d '=' -f 2)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "TAG=$VERSION" >> $GITHUB_ENV

    - name: Display Tag for Confirmation
      run: |
        echo "Using tag       : $TAG"
        echo "Using Dockerfile: $VERSION"

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        platforms: linux/amd64,linux/arm64
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ env.TAG }}

    - name: Get image digest
      id: get_digest
      run: |
        DIGEST=$(docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:${{ env.TAG }} | grep -m 1 "Digest:" | awk '{ print $2 }')
        echo "DIGEST=$DIGEST" >> $GITHUB_ENV

    - name: Save Dockerfile and tag information to JSON
      run: |
        echo "{\"image_name\": \"${{ env.IMAGE_NAME }}\", \"tag\": \"${{ env.TAG }}\", \"digest\": \"${{ env.DIGEST }}\"}" > dev-build-info.json

    - name: Upload build info as artifact
      uses: actions/upload-artifact@v4
      with:
        name: dev-build-info
        path: dev-build-info.json

